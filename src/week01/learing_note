*什么是算法？
一系列解决问题的、清晰的、可执行的计算机指令
具有五大特性：有限性、确定性（不产生二义）、可行性、输入、输出
函数可能没有输入，但是算法必须有输入作为其操作的对象

*线性查找法
输入：数组、和目标元素
输出：目标元素所在的索引；若不存在，返回-1
优化：1)查找方法使用静态方法，方便不需要创建类对象就可以调用方法；
     2)类使用私有构造方法，使得使用这个api的用户不能进行创建类对象，防止误操作；
     3)使用泛型，但是泛型只能使用基本数据类型的包装类
     4)对于自己书写的类，为了进行比较，必须重写equals()方法，否则Object类中的equals()方法默认比较对象之间的引用

*循环不变量
循环体：维持循环不变量，证明算法的正确性，写出正确的代码

*复杂度分析
复杂度分析通常只看最差的情况，即算法的上界
数据规模=n=data.length
时间T不看，看O(n),且常数不重要
算法复杂度描述的是随着数据规模n的增大，算法性能的变化趋势
如果是T1=10000n,T2=2n方，则根据常数不重要的规则，可知T1=O(n),T2=O(n方)，所以复杂度T1<T2，T1更优，当然存在一个临界点，使两者相反，该临界点可以求出，即n0=5000
指数型复杂度尽量不超过n=20，即O(n方)中你不超过20
阶乘复杂度也要尽量避免，比指数型复杂度还要复杂，要用的话n=20以下可以
判断数字n是否为偶数的复杂度为O(1)

*常见算法复杂度排序：O(1)<O(logn)<O(根号n)<O(n)<O(nlogn)<O(n方)<O(2指数n)<O(n!)，且O(logn)和O(nlogn)有巨大优势

*空间复杂度在现代计算机来说不值钱，时间更加值钱，因此空间复杂度不值得探讨，更加看重时间复杂度，存在一种用空间换时间的思维
